리액트 컴포넌트
- 컴포넌트 기반 구조
    * 작은 컴포넌트들이 모여서 하나의 컴포넌트를 구성하고 이러한 컴포넌트들이 모여서
    전체 페이지를 구성
- 개념적으로는 자바스크립트의 함수와 비슷함
    * 속성들을 입력으로 받아서 그에 맞는 리액트 엘리먼트를 생성하여 리턴함

Props
- Props의 개념
    * 리액트 컴포넌트들의 속성
    * 컴포넌트에 전달할 다양한 정보를 담고 있는 자바스크립트 객체
-Props의 특징
    * 읽기 전용
    * 리액트 컴포넌트의 props는 바꿀 수 없고, 같은 props가 들어오면 항상 같은 엘리먼트를 
      리턴해야 함
-Props 사용법
    *JSX를 사용할 경우 컴포넌트에 키-값 쌍 형태로 넣어주면 됨
    * 문자열 이외에 정수, 변수, 그리고 다른 컴포넌트 등이 들어갈 경우에는 중괄호를 사용해서 
      감싸주어야 함
    * JSX를 사용하지 않는 경우에는 createElement() 함수의 두번째 파라미터로 자바스크립트 
      객체를 넣어주면 됨

컴포넌트 만들기
- 컴포넌트의 종류
    * 클래스 컴포넌트와 함수 컴포넌트로 나뉨
- 함수 컴포넌트
    * 함수 형태로 된 컴포넌트
- 클래스 컴포넌트
    * ES6의 클래스를 사용하여 만들어진 컴포넌트
- 컴포넌트 이름 짓기
    * 컴포넌트의 이름은 항상 대문자로 시작해야 함
    * 소문자로 시작할 경우 컴포넌트를 DOM 태그로 인식하기 때문
- 컴포넌트 렌더링
    * 컴포넌트로부터 엘리먼트를 생성하여 이를 리액트 DOM에 전달

컴포넌트 합성
- 여러 개의 컴포넌트를 합쳐서 하나의 컴포넌트를 만드는 것

컴포넌트 추출
- 큰 컴포넌트에서 일부를 추출해서 새로운 컴포넌트를 만드는 것
- 기능 단위로 구분하는 것이 좋고, 나중에 곧바로 재사용이 가능한 형태로 추출하는 것이 좋음

-------------------------------------------------------------------------------------------
State
- State란 ?
    * 리액트 컴포넌트의 변경 가능한 데이터
    * 컴포넌트를 개발하는 개발자가 직접 정의해서 사용
    * state가 변경될 경우 컴포넌트가 재렌더링됨
    * 렌더링이나 데이터 흐름에 사용되는 값만 state에 포함시켜야 함
- State의 특징
    * 자바스크립트 객체 형태로 존재
    * 직접적인 변경이 불가능함
    * 클래스 컴포넌트
      @ 생성자에서 모든 state를 한 번에 정의
      @ state를 변경하고자 할 때에는 꼭 setState() 함수를 사용해야 함
- 함수 컴포넌트
    * useState() 훅을 사용하여 각각의 state를 정의
    * 각 state 별로 주어지는 set함수를 사용하여 state 값을 변경

생명주기
- 마운트
    * 컴포넌트가 생성될 때
    * componentDidMount()
- 업데이트
    * 컴포넌트의 props가 변경될 때
    * setState() 함수 호출에 의해 state가 변경될 때
    * forceUpdate() 라는 강제 업데이트 함수가 호출될 때
    * componentDidUpdate()
- 언마운트
    * 상위 컴포넌트에서 현재 컴포넌트를 더이상 화면에 표시하지 않게 될 때
    * componentWillUnmount()
- 컴포넌트는 계속 존재하는 것이 아니라 시간의 흐름에 따라 생서오디고 업데이트 되다가 
  사라지는 과정을 겪음